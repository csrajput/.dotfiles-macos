#!/usr/local/bin/expect -f
#
# This Expect script was generated by autoexpect on Sun Jan 23 02:41:03 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.


set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- $arg
    }
}


#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don
set USER [lindex $argv 0]
set APASS [lindex $argv 1];
set MPASS [lindex $argv 2];
set YPASS [lindex $argv 3];
set timeout -1
spawn sudo /opt/cisco/anyconnect/bin/vpn connect {Automatic Selection (Route53)}
match_max 100000
expect -exact "Password:"
send -- "$APASS\r"
# ignore version
expect -re {\r\nCisco AnyConnect Secure Mobility Client \(version ([\d.]+)\) \.\r}
# ignore the copyright
expect -re {\r\nCopyright \(c\) ([\d\- ]+) Cisco Systems, Inc\.  All Rights Reserved\.\r}
expect -exact "\r
\r
\r  >> state: Disconnected\r
\r  >> state: Disconnected\r
\r  >> notice: Ready to connect.\r
\rVPN> \r  >> registered with local VPN subsystem.\r
\rVPN> \r  >> contacting host (Automatic Selection (Route53)) for login information...\r
\r  >> notice: Contacting Automatic Selection (Route53).\r
\r  >> notice: Posture Assessment: Required for access\r
\r  >> notice: Posture Assessment: Checking for updates...\r
\r  >> notice: Posture Assessment: Initiating...\r
\r  >> notice: Posture Assessment: Active\r
\r  >> notice: Posture Assessment: Initiating...\r
\r
  >> Please enter your username and password.\r
    0) Orca\r
    1) Uwajimaya\r
    2) orca-AmazonMacs\r
    3) orca-CSOS\r
    4) orca-DOMAIN_JOIN\r
    5) orca-Ubuntu\r"
    #6) orca-VCC-BYOD\r"
expect -re {Group: \[[^\]]*\] }

send -- "0\r"
expect -re {\r\n\r\nUsername: \[[^\]]*\] }
send -- "$USER\r"
expect -exact "$USER\r"
#Password: " 
#puts "$MPASS<Press yubikey now>\r"
#send -- "$MPASS"
